NARF
====

Not A Real Filesystem

yes, i really wrote it all in one night. i just needed something i could
use in a small embedded system project i was working on, and FAT32 took
up way more space than i was happy with.

we assume there's storage media, and it is organized in sectors of 512
bytes that we can access with linear addressing.  you the developer need
to supply the functions described in narf_io.h.  this is the hardware
abstraction layer used by NARF.  these are straightforward and pretty
much what you would expect to read and write data, and get the total
size of the media in sectors.

bool narf_io_open(void);
bool narf_io_close(void);
uint32_t narf_io_sectors(void);
bool narf_io_write(uint32_t sector, uint8_t *data);
bool narf_io_read(uint32_t sector, uint8_t *data);

see narf_io.h for details.

on the media, we maintain a mapping from KEYS (expressed as C strings)
to DATA SIZE and DATA LOCATION.  an entry in this mapping is called a NAF.
a NAF is Not A File.  the size of the key is limited to about 340 bytes,
which is longer than total path length limits on some real file systems.
any character is allowed in a key, except '\0', for obvious reasons.

the mapping is stored in both a binary tree and doubly linked list.
each NAF in the tree contains "left", "right", and "parent" pointers
of a binary tree, as well as "previous" and "next" pointers of a doubly
linked list.  this gives O(logâ‚‚N) searching and O(N) in-order traversal.
ordering is done by "strcmp" on keys.

the first sector, sector 0, is reserved for holding pointers to the root
of the tree, and the beginning and end of the linked list.

free'd sectors are placed in a chain in order of increasing size.
new allocations are made from the chain if possible, or by expanding
into unused storage.

===

If you're concerned about wear leveling and bad block detection, modern
micro SD cards have this built in to the silicon.  there's no need for
NARF to worry about it on uSD.

===

If you're concerned about robustness to power loss, as of version 1,
NARF keeps copies of "good / complete" and "in progress" changes via
"generation" numbering.  if a change is interrupted midway, NARF falls
back to the "good / complete" version of the data.

===

there are two convenience functions worth mentioning, narf_dirfirst()
and narf_dirnext().  together they allow you to traverse keys as if they
were full paths.

imagine you have a NARF with the following keys:

/bar
/biz
/foo
/groink/
/groink/elephant
/groink/zebra
/zebra

if you then call narf_dirfirst("/", "/"), it will return the NAF for
"/bar". continuing on with narf_dirnext(), it will return NAF for each
key EXCEPT "/groink/elephant" and "/groink/zebra".

if you instead call narf_dirfirst("/groink/", "/"), it will return the
NAF for "/groink/", and the call to narf_dirnext() will return the NAF
for "/groink/elephant" followed by "/groink/zebra".

this makes sense if you think of entries ending in "/" as directories
and others as just files.  just be sure your dirname parameter ends
with your separator.  you can of course use any separator you like,
including multicharacter separators (which might be useful for utf8).
